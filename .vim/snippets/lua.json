{
  "function": {
    "prefix": "func",
    "body": ["function ${1:functionName}(${2:params})", "  ${3:-- implementation}", "end"],
    "description": "Function declaration"
  },
  "local function": {
    "prefix": "lfunc",
    "body": ["local function ${1:functionName}(${2:params})", "  ${3:-- implementation}", "end"],
    "description": "Local function declaration"
  },
  "if statement": {
    "prefix": "if",
    "body": ["if ${1:condition} then", "  ${2:-- implementation}", "end"],
    "description": "If statement"
  },
  "if-else": {
    "prefix": "ife",
    "body": ["if ${1:condition} then", "  ${2:-- if block}", "else", "  ${3:-- else block}", "end"],
    "description": "If-else statement"
  },
  "for loop": {
    "prefix": "for",
    "body": ["for ${1:i} = ${2:1}, ${3:n} do", "  ${4:-- implementation}", "end"],
    "description": "For loop"
  },
  "for pairs": {
    "prefix": "forp",
    "body": ["for ${1:key}, ${2:value} in pairs(${3:table}) do", "  ${4:-- implementation}", "end"],
    "description": "For pairs loop"
  },
  "for ipairs": {
    "prefix": "fori",
    "body": ["for ${1:index}, ${2:value} in ipairs(${3:array}) do", "  ${4:-- implementation}", "end"],
    "description": "For ipairs loop"
  },
  "table": {
    "prefix": "table",
    "body": ["local ${1:tableName} = {", "  ${2:key} = ${3:value},", "}"],
    "description": "Table declaration"
  },
  "module": {
    "prefix": "module",
    "body": ["local M = {}", "", "${1:-- module implementation}", "", "return M"],
    "description": "Lua module template"
  },
  "require": {
    "prefix": "req",
    "body": ["local ${1:name} = require('${2:module}')"],
    "description": "Require statement"
  },
  "pcall": {
    "prefix": "pcall",
    "body": [
      "local ok, ${1:result} = pcall(${2:function}, ${3:args})",
      "if not ok then",
      "  ${4:-- error handling}",
      "end"
    ],
    "description": "Protected call"
  }
}
